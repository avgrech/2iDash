@page "/site-health"

<h3>Site Health</h3>
<div class="mb-3">
    <label class="form-label">Refresh Interval (seconds)</label>
    <InputNumber class="form-control d-inline w-auto" @bind-Value="refreshInterval" />
    <button class="btn btn-sm btn-secondary ms-2" @onclick="RestartTimer">Apply</button>
</div>

@if (siteStatuses.Count == 0)
{
    <p>No sites configured.</p>
}
else
{
    <div class="row row-cols-1 row-cols-sm-2 row-cols-md-3 g-4">
        @foreach (var status in siteStatuses)
        {
            <div class="col">
                <div class="card text-white @(status.IsHealthy ? "bg-success" : status.Snoozed ? "bg-danger" : "flash-red")">
                    <div class="card-body">
                        <h5 class="card-title">@status.Site.Name
                            @if (!status.IsHealthy)
                            {
                                <button class="btn btn-sm btn-light float-end" @onclick="() => ToggleSnooze(status)">
                                    @(status.Snoozed ? "Unsnooze" : "Snooze")
                                </button>
                            }
                        </h5>
                        <p class="card-text mb-1">
                            <a href="@status.Site.Url" class="text-white text-decoration-underline">@status.Site.Url</a>
                        </p>
                        <p class="card-text mb-1">Environment: @status.Site.Environment</p>
                        <p class="card-text mb-1">System: @status.Site.SystemModel?.Name</p>
                        @if (!status.IsHealthy && status.Error != null)
                        {
                            <p class="card-text fw-bold">@status.Error</p>
                        }
                    </div>
                </div>
            </div>
        }
    </div>
}

@implements IDisposable

@code {
    private List<SiteStatus> siteStatuses = new();
    private HashSet<int> snoozedSites = new();
    private PeriodicTimer? timer;
    private CancellationTokenSource cts = new();
    private int refreshInterval = 5;

    [Inject] private ApplicationDbContext Db { get; set; } = default!;

    protected override async Task OnInitializedAsync()
    {
        await LoadStatuses();
        RestartTimer();
    }

    private async Task LoadStatuses()
    {
        siteStatuses.Clear();

        var sites = await Db.Sites
            .Include(s => s.SystemModel)
            .ToListAsync();

        using var http = new HttpClient();
        foreach (var site in sites)
        {
            var status = new SiteStatus { Site = site, Snoozed = snoozedSites.Contains(site.Id) };
            try
            {
                var response = await http.GetAsync(site.HealthUrl);
                if (response.IsSuccessStatusCode)
                {
                    status.IsHealthy = true;
                }
                else
                {
                    status.IsHealthy = false;
                    status.Error = $"{(int)response.StatusCode} {response.ReasonPhrase}";
                }
            }
            catch (Exception ex)
            {
                status.IsHealthy = false;
                status.Error = ex.Message;
            }

            siteStatuses.Add(status);
        }

        siteStatuses = siteStatuses
            .OrderBy(s => s.Snoozed ? 2 : (s.IsHealthy ? 1 : 0))
            .ToList();
    }

    private async Task RefreshLoopAsync()
    {
        if (timer is null)
            return;

        try
        {
            while (await timer.WaitForNextTickAsync(cts.Token))
            {
                await LoadStatuses();
                StateHasChanged();
            }
        }
        catch (OperationCanceledException)
        {
        }
    }

    private void RestartTimer()
    {
        cts.Cancel();
        cts.Dispose();
        cts = new CancellationTokenSource();

        timer = new PeriodicTimer(TimeSpan.FromSeconds(refreshInterval));
        _ = RefreshLoopAsync();
    }

    private void ToggleSnooze(SiteStatus status)
    {
        status.Snoozed = !status.Snoozed;
        if (status.Snoozed)
            snoozedSites.Add(status.Site.Id);
        else
            snoozedSites.Remove(status.Site.Id);

        siteStatuses = siteStatuses
            .OrderBy(s => s.Snoozed ? 2 : (s.IsHealthy ? 1 : 0))
            .ToList();
    }

    public void Dispose()
    {
        cts.Cancel();
        timer?.Dispose();
        cts.Dispose();
    }

    private class SiteStatus
    {
        public Site Site { get; set; } = default!;
        public bool IsHealthy { get; set; }
        public string? Error { get; set; }
        public bool Snoozed { get; set; }
    }
}

