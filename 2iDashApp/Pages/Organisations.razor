@page "/organisations"

<h3>Create Organisation</h3>
<div class="card-form">
    <EditForm Model="@newOrg" OnValidSubmit="@CreateOrganisation">
        <DataAnnotationsValidator />
        <ValidationSummary />
        <div class="mb-3">
            <label class="form-label">Name</label>
            <InputText class="form-control" @bind-Value="newOrg.Name" />
        </div>
        <button class="btn btn-primary" type="submit">Create</button>
    </EditForm>
</div>

<h3 class="mt-4">Existing Organisations</h3>
@if (organisations.Count == 0)
{
    <p>No organisations created.</p>
}
else
{
    <ul class="list-group">
        @foreach (var org in organisations)
        {
            <li class="list-group-item">
                @if (editOrg != null && editOrg.Id == org.Id)
                {
                    <EditForm Model="@editOrg" OnValidSubmit="UpdateOrganisation">
                        <DataAnnotationsValidator />
                        <ValidationSummary />
                        <div class="input-group">
                            <InputText class="form-control" @bind-Value="editOrg.Name" />
                            <button class="btn btn-primary" type="submit">Save</button>
                            <button class="btn btn-secondary" type="button" @onclick="CancelEdit">Cancel</button>
                        </div>
                    </EditForm>
                }
                else
                {
                    <div class="d-flex justify-content-between align-items-center">
                        <span>@org.Name</span>
                        <span>
                            <button class="btn btn-sm btn-secondary me-1" @onclick="() => StartEdit(org)">Edit</button>
                            <button class="btn btn-sm btn-danger" @onclick="() => DeleteOrganisation(org)">Delete</button>
                        </span>
                    </div>
                }
            </li>
        }
    </ul>
}

@code {
    private Organisation newOrg = new();
    private Organisation? editOrg;
    private List<Organisation> organisations = new();

    [Inject] private ApplicationDbContext Db { get; set; } = default!;

    protected override async Task OnInitializedAsync()
    {
        organisations = await Db.Organisations.ToListAsync();
    }

    private async Task CreateOrganisation()
    {
        Db.Organisations.Add(newOrg);
        await Db.SaveChangesAsync();
        organisations.Add(newOrg);
        newOrg = new Organisation();
    }

    private void StartEdit(Organisation org)
    {
        editOrg = new Organisation { Id = org.Id, Name = org.Name };
    }

    private void CancelEdit()
    {
        editOrg = null;
    }

    private async Task UpdateOrganisation()
    {
        if (editOrg is null)
            return;

        var org = await Db.Organisations.FindAsync(editOrg.Id);
        if (org != null)
        {
            org.Name = editOrg.Name;
            await Db.SaveChangesAsync();
            var existing = organisations.First(o => o.Id == org.Id);
            existing.Name = org.Name;
        }
        editOrg = null;
    }

    private async Task DeleteOrganisation(Organisation org)
    {
        Db.Organisations.Remove(org);
        await Db.SaveChangesAsync();
        organisations.Remove(org);
    }
}
